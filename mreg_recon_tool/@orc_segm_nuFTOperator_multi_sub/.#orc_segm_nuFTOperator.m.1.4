function  A = orc_segm_nuFTOperator(trajectory, imageDim, sensmaps, phasemap, dwelltime, Ns)

% function  A = orc_segm_nuFTOperator(trajectory, imageDim, sensmaps, phasemap, dwelltime, Ns)
%
% imageDim = [#rows #columns] = [Nr Nc], of the image
% trajectory = Nt x 2 = arbitrary trajectory in 2D k-space
% sensmaps = Nr x Nc x #coils
% phasemap = offresonance map in rads/s
% dwelltime = time between k-space samples
% Ns = number of segments
%
% 30.09.2011
% Thimo Hugger


if isempty(sensmaps)
    s.numCoils = 1;
else
    if size(trajectory,2) == 3 && length(size(sensmaps))== 4
        s.numCoils = size(sensmaps, length(size(sensmaps)));
    end
    if size(trajectory,2) == 3 && length(size(sensmaps))== 3
        s.numCoils = 1;
    end
    if size(trajectory,2) == 2 && length(size(sensmaps))== 3
        s.numCoils = size(sensmaps, length(size(sensmaps)));
    end
    if size(trajectory,2) == 2 && length(size(sensmaps))== 2
        s.numCoils = 1;
    end
end

s.imageDim = imageDim;
s.adjoint = 0;
tl = size(trajectory,1);
s.trajectory_length = tl;
if size(trajectory,2) == 3
    s.nufftNeighbors = [5 5 5];
else
    s.nufftNeighbors = [5 5];
end
s.phasemap = phasemap;


s.tADC = tl*dwelltime;
s.oversampling = s.imageDim;

s.nSegments = Ns;
sr = floor((tl-Ns-1)/Ns);
sl = 2*sr + 1;

si = cell(1,Ns+1);
si{1} = 1:sr+1;
for k=1:Ns-1
    si{k+1} = k*(sr+1)+1-sr:k*(sr+1)+1+sr;
end
si{end} = Ns*(sr+1)+1-sr:tl;
s.segment_index = si;

h = hann(sl+2);
h = h(2:end-1);
ipf = cell(1,Ns+1);
ipf{1} = h(sr+1:end);
for k=1:Ns-1
    ipf{k+1} = h;
end
ipf{end} = [h(1:sr);ones(length(si{end})-sr,1)];  %the remaining datapoints are not included in the interpolation and are therefore set to the last segment only. This is an approximation.
s.segment_filter = ipf;

T = s.tADC * [0:tl-1]/tl + 0.002;
t = zeros(1,Ns+1);
t(1) = 0.002;
for k=1:Ns
    t(k+1) = T(k*(sr+1)+1);
end
s.t = t;

fieldmap_smooth = smooth3(phasemap,'gaussian',5,1);
[fieldmap_dx,fieldmap_dy,fieldmap_dz] = gradient(fieldmap_smooth);
intravoxel_dephasing = zeros(64,64,64,length(t));
for i=1:length(t)
    bob = 8*sin(fieldmap_dx/2*t(i)).*sin(fieldmap_dy/2*t(i)).*sin(fieldmap_dz/2*t(i))./(fieldmap_dx*t(i))./(fieldmap_dy*t(i))./(fieldmap_dz*t(i));
    bob(isnan(bob)) = 1;
    intravoxel_dephasing(:,:,:,i) = bob;
end
intravoxel_dephasing(intravoxel_dephasing>=0 & intravoxel_dephasing<0.1) = 0.1;
intravoxel_dephasing(intravoxel_dephasing<0 & intravoxel_dephasing>-0.1) = -0.1;
s.intravoxel_dephasing = intravoxel_dephasing;
%s.intravoxel_dephasing = ones(size(intravoxel_dephasing));

if isempty(sensmaps)
    s.sensmaps{1} = 1;
else
    for k=1:s.numCoils
        if size(trajectory,2) == 3
            if s.numCoils > 1
            s.sensmaps{k} = sensmaps(:,:,:,k);
            else
            s.sensmaps{1}=sensmaps;
            end
        else
             s.sensmaps{k} = sensmaps(:,:,k);
        end
    end
end

if size(trajectory,2) == 3
    trajectory = [trajectory(:,2), -trajectory(:,1) , trajectory(:,3)];
else
    trajectory = [trajectory(:,2), -trajectory(:,1)];
end
for k=1:Ns+1
    nstr = nufft_init(trajectory(si{k},:), s.imageDim, s.nufftNeighbors, s.oversampling, s.imageDim/2, 'kaiser');
    s.interpolation_matrix{k} = nstr.p.arg.G;
end
s.scaling_factor = nstr.sn; % is the same each time

A = class(s,'orc_segm_nuFTOperator');
