function  A = nuFTOperator(trajectory, imageDim, sensmaps, os)

% usage:
%    A = nuFTOperator(trajectory, imageDim, sensmaps)
%
% imageDim = [#rows #columns] = [Nr Nc], of the image
% trajectory = Nt x 2 = arbitrary trajectory in 2D k-space
% densityComp = variable density compensation vector (=1 if no comp.)
% sensmaps = Nr x Nc x #coils
% os = oversampling (default=1)
%
% 30.09.2011
% Thimo Hugger

if nargin==0 % default constructor
    s.numCoils = [];
    s.imageDim = [];
    s.adjoint = 0;
    s.trajectory_length = [];
    s.nufftNeighbors = [];
    s.sensmaps = {};
    s.nufftStruct = [];
else
    if nargin<=2 || isempty(sensmaps)
        s.numCoils = 1;
    else
        if size(trajectory,2) == 3 && length(size(sensmaps))== 4
            s.numCoils = size(sensmaps, length(size(sensmaps)));
        end
        if size(trajectory,2) == 3 && length(size(sensmaps))== 3
            s.numCoils = 1;
        end
        if size(trajectory,2) == 2 && length(size(sensmaps))== 3
            s.numCoils = size(sensmaps, length(size(sensmaps)));
        end
        if size(trajectory,2) == 2 && length(size(sensmaps))== 2
            s.numCoils = 1;
        end
    end
    if nargin<=3 || isempty(os)
        os = 1;
    end
    
    s.imageDim = imageDim;
    s.adjoint = 0;
    s.trajectory_length = size(trajectory,1);
    if size(trajectory,2) == 3
        s.nufftNeighbors = [5 5 5];
    else
        s.nufftNeighbors = [5 5];
    end
    
    
    if nargin<=2 || isempty(sensmaps)
        s.sensmaps{1} = 1;
    else
        for k=1:s.numCoils
            if size(trajectory,2) == 3
                if s.numCoils > 1
                    s.sensmaps{k} = sensmaps(:,:,:,k);
                else
                    s.sensmaps{1}=sensmaps;
                end
            else
                s.sensmaps{k} = sensmaps(:,:,k);
            end
        end
    end
    
    if size(trajectory,2) == 3
        trajectory = [trajectory(:,2), -trajectory(:,1) , trajectory(:,3)];
    else
        trajectory = [trajectory(:,2), -trajectory(:,1)];
    end
    s.nufftStruct = nufft_init(trajectory, imageDim, s.nufftNeighbors, round(os*imageDim), ceil(imageDim/2),'kaiser');
    s.sensmaps_scale = bsxfun(@times,s.nufftStruct.sn,sensmaps);
    s.sensmaps_scale_adj = conj(s.sensmaps_scale);

end

A = class(s,'nuFTOperator');
